     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  ;Se citesc de la tastatura doua siruri de caractere. Sa se interclaseze caracterele care compun cele doua siruri si apoi sa se afiseze in fisierul output.txt sirul destinatie, in ordine inversa.
     8                                  
     9                                  ;Sirul 1 citit este: 126789
    10                                  ;Sirul 2 citit este: 12345689
    11                                  
    12                                  ;Sirul interclasat va fi:
    13                                  ;11223456678899
    14                                  
    15                                  ;output.txt
    16                                  ;99887665432211
    17                                  
    18                                  ;Two character arrays are read from the keyboard. Merge the characters from the arrays and print the merging result in the output file in reverse order. 
    19                                  
    20                                  ;The first read array: 126789
    21                                  ;The second read array: 12345689
    22                                  
    23                                  ;The merged result:
    24                                  ;11223456678899
    25                                  
    26                                  ;output.txt
    27                                  ;99887665432211
    28                                  extern exit, printf, scanf, fopen, fclose,fread,fprintf          ; tell nasm that exit exists even if we won't be defining it
    29                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    30                                  import printf msvcrt.dll
    31                                  import scanf msvcrt.dll
    32                                  import fopen msvcrt.dll
    33                                  import fclose msvcrt.dll
    34                                  import fread msvcrt.dll
    35                                  import fprintf msvcrt.dll
    36                                  
    37                                  ; our data is declared here (the variables needed by our program)
    38                                  segment data use32 class=data
    39                                      ; ...
    40 00000000 66696C65312E747874-          file db "file1.txt",0
    40 00000009 00                 
    41 0000000A FFFFFFFF                    file_desc dd -1
    42 0000000E 6100                        write_mode db "a", 0
    43 00000010 257300                      format_string db "%s",0
    44 00000013 25730A0D00                  print db "%s",10 , 13,0
    45 00000018 00                          len_1 db 0
    46 00000019 00                          len_2 db 0
    47 0000001A <res 00000064>              sir_1 resb 100
    48 0000007E <res 00000064>              sir_2 resb 100
    49 000000E2 00<rept>                    sir_3 times 200 db 0
    50                                     
    51                                      
    52                                  ; our code starts here
    53                                  segment code use32 class=code
    54                                      start:
    55                                          ; ...
    56 00000000 68[1A000000]                    push dword sir_1 ; we read the first string
    57 00000005 68[10000000]                    push dword format_string
    58 0000000A FF15[00000000]                  call [scanf]
    59 00000010 83C408                          add esp, 4*2
    60                                          
    61 00000013 BE[1A000000]                    mov esi,sir_1
    62                                          lenght_1: ; we compute the length of the first string
    63 00000018 AC                                      lodsb
    64 00000019 3C00                                    cmp al,0
    65 0000001B 7409                                    je leave1
    66 0000001D 8005[18000000]01                        add [len_1],byte 1
    67 00000024 EBF2                                    jmp lenght_1 
    68                                          
    69                                          
    70                                          leave1:
    71 00000026 68[7E000000]                    push dword sir_2 ; we read the second string
    72 0000002B 68[10000000]                    push dword format_string
    73 00000030 FF15[00000000]                  call [scanf]
    74 00000036 83C408                          add esp , 4*2
    75                                          
    76 00000039 BE[7E000000]                    mov esi, sir_2
    77                                          lenght_2: ; we compute the length of the second string
    78 0000003E AC                                      lodsb
    79 0000003F 3C00                                    cmp al,0
    80 00000041 7409                                    je leave2
    81 00000043 8005[19000000]01                        add [len_2], byte 1
    82 0000004A EBF2                                    jmp lenght_2
    83                                          
    84                                          
    85                                          leave2:
    86 0000004C 68[0E000000]                    push dword write_mode
    87 00000051 68[00000000]                    push dword file
    88 00000056 FF15[00000000]                  call [fopen]
    89 0000005C 83C408                          add esp, 4*2
    90                                          
    91 0000005F A3[0A000000]                    mov [file_desc], eax
    92 00000064 83F800                          cmp eax,0
    93 00000067 7452                            je final
    94                                          
    95                                          ;mov dl,0
    96                                          ;mov esi , sir_1
    97                                          ;mov edi , sir_2
    98                                          ;mov ebx, 0
    99                                          ;concatenate:
   100                                              ;mov al, [esi]
   101                                              ;mov dl, [edi]
   102                                              ;cmp al,dl ; we compare the elements
   103                                              ;jb add_esi ; if al < dl then we will add al to the 3rd string
   104                                              ;jae add_edi ; if dl < al we will add dl to the 3rd string
   105                                          
   106                                          
   107                                          add_esi:
   108                                              ;mov [sir_3+ebx], al ; we put al in our string
   109                                              ;inc ebx
   110                                              ;inc esi
   111                                              ;jmp concatenate
   112                                          
   113                                          add_edi:
   114                                              ;mov [sir_3+ebx],dl ; we put dl in our string
   115                                              ;inc ebx
   116                                              ;inc edi
   117                                              ;jmp concatenate
   118                                          
   119                                          
   120                                          
   121 00000069 BE[1A000000]                    mov esi,sir_1
   122                                          
   123                                          lop:
   124 0000006E AC                                  lodsb
   125 0000006F 3C00                                cmp al,0
   126 00000071 7400                                je outer
   127                                          
   128                                          outer:
   129 00000073 AC                                  lodsb
   130 00000074 6698                                cbw
   131 00000076 98                                  cwde
   132 00000077 50                                  push dword eax
   133 00000078 68[13000000]                        push dword print
   134 0000007D FF35[0A000000]                      push dword [file_desc]
   135 00000083 FF15[00000000]                      call [fprintf]
   136                                              
   137                                          
   138                                          
   139                                          
   140                                          
   141                                          
   142                                          
   143 00000089 68[1A000000]                    push dword sir_1
   144 0000008E 68[13000000]                    push dword print
   145 00000093 FF35[0A000000]                  push dword [file_desc]
   146 00000099 FF15[00000000]                  call [fprintf]
   147 0000009F 83C40C                          add esp, 4*3
   148                                          
   149 000000A2 68[7E000000]                    push dword sir_2
   150 000000A7 68[13000000]                    push dword print
   151 000000AC FF35[0A000000]                  push dword [file_desc]
   152 000000B2 FF15[00000000]                  call [fprintf]
   153 000000B8 83C408                          add esp, 4*2
   154                                          
   155                                          
   156                                          
   157                                          
   158                                          
   159                                          
   160                                          
   161                                          
   162                                          final:
   163 000000BB 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   164 000000BD FF15[00000000]                  call    [exit]       ; call exit to terminate the program
