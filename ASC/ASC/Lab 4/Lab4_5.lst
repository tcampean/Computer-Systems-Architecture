     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 57                          a db 01010111b
    15 00000001 BE                          b db 10111110b
    16 00000002 0000                        c dw 0
    17                                      
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22                                          
    23 00000000 BB00000000                      mov ebx,0 ; the result will be stored in ecx
    24 00000005 A0[01000000]                    mov al,[b]
    25 0000000A B400                            mov ah,0
    26 0000000C 66BA0000                        mov dx,0
    27 00000010 6652                            push dx
    28 00000012 6650                            push ax
    29 00000014 58                              pop eax ; eax =0000_0000_0000_0000_0000_0000_1011_1110b
    30 00000015 B103                            mov cl,3
    31 00000017 83E078                          and eax , 0000_0000_0000_0000_0000_0000_0111_1000b ; we isolate thr bits 3-6
    32 0000001A D3C8                            ror eax,cl ; we put the bits we isolated on the bits 0-3
    33 0000001C 09C3                            or ebx,eax ; we put the result in ebx
    34 0000001E 81E30FFFFFFF                    and ebx , 1111_1111_1111_1111_1111_1111_0000_1111b ; the bits 4-7 will get the value 0
    35 00000024 81E3FFFEFFFF                    and ebx, 1111_1111_1111_1111_1111_1110_1111_1111b ; the bit 8 will get the value 0
    36 0000002A 81CB00060000                    or ebx,0000_0000_0000_0000_0000_0110_0000_0000b ; the bits 9-10 will get the value 1
    37 00000030 66A1[00000000]                  mov ax,[a]
    38 00000036 B400                            mov ah,0
    39 00000038 66BA0000                        mov dx,0
    40 0000003C 6652                            push dx
    41 0000003E 6650                            push ax
    42 00000040 58                              pop eax
    43 00000041 83E01F                          and eax , 0000_0000_0000_0000_0000_0000_0001_1111b ; we isolate the bits 0-4 of eax
    44 00000044 B10B                            mov cl ,11
    45 00000046 D3C0                            rol eax,cl ; the isolated bits will be put on the bits 11-15
    46 00000048 09C3                            or ebx,eax ; we put the result in ebx
    47 0000004A 81CB0000FFFF                    or ebx,1111_1111_1111_1111_0000_0000_0000_0000b ; the bits 16-31 will be set to 1
    48                                          
    49                                          
    50                                          
    51                                          
    52                                          
    53                                          
    54                                          ; exit(0)
    55 00000050 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    56 00000052 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
