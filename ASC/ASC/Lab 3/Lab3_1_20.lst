     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 04                          a db 4
    15 00000001 0500                        b dw 5
    16 00000003 08000000                    c dd 8
    17 00000007 0A00000000000000            d dq 10
    18 0000000F 00000000                    x dd 0
    19 00000013 0000000000000000            y dq 0
    20                                      
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26 00000000 A0[00000000]                    mov al,[a]
    27 00000005 6698                            cbw
    28 00000007 98                              cwde
    29 00000008 0305[03000000]                  add eax,[c] ; eax = a + c
    30 0000000E A3[0F000000]                    mov [x],eax
    31 00000013 66A1[01000000]                  mov ax,[b]
    32 00000019 98                              cwde
    33 0000001A 2905[0F000000]                  sub [x],eax ; x = a + c -b
    34 00000020 A0[00000000]                    mov al,[a]
    35 00000025 6698                            cbw ; ax = al =a
    36 00000027 98                              cwde ; eax = ax = a
    37 00000028 0105[0F000000]                  add [x],eax ; x = a + c - b + a
    38 0000002E A1[03000000]                    mov eax,[c]
    39 00000033 99                              cdq ; edx:eax = c
    40 00000034 2905[07000000]                  sub DWORD [d],eax
    41 0000003A 1915[0B000000]                  sbb DWORD[d+4],edx ; d = d - c
    42 00000040 A1[0F000000]                    mov eax,[x] ; eax = a + c - b + a
    43 00000045 99                              cdq
    44 00000046 0305[07000000]                  add eax,DWORD[d]
    45 0000004C 1315[0B000000]                  adc edx,DWORD[d+4] ;edx:eax = a+c-b+a+d-c
    46                                          
    47                                          
    48                                          
    49                                          
    50                                       
    51                                          
    52                                   
    53                                          ; exit(0)
    54 00000052 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 00000054 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
