     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 CEFF                        a dw -50
    15 00000002 0A                          b db 10
    16 00000003 02000000                    e dd 2
    17 00000007 0400000000000000            x dq 4
    18 0000000F 0000000000000000            y dq 0
    19 00000017 0000                        z dw 0
    20 00000019 00000000                    w dd 0
    21                                      
    22                                      
    23                                  
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; ...
    28 00000000 66A1[00000000]                  mov ax,[a]
    29 00000006 98                              cwde ; eax = a
    30 00000007 BB02000000                      mov ebx,2
    31 0000000C F7EB                            imul ebx ; edx:eax= 2*a
    32 0000000E A3[0F000000]                    mov DWORD [y],eax
    33 00000013 8915[13000000]                  mov DWORD [y+4],edx ; y = 2 *a
    34 00000019 A0[02000000]                    mov al,[b]
    35 0000001E 6698                            cbw
    36 00000020 98                              cwde 
    37 00000021 99                              cdq ; edx:eax = b
    38 00000022 2905[0F000000]                  sub DWORD[y],eax
    39 00000028 1915[13000000]                  sbb DWORD[y+4],edx; y = 2*a-b
    40 0000002E A0[02000000]                    mov al,[b]
    41 00000033 F62D[02000000]                  imul BYTE [b]
    42 00000039 98                              cwde ; eax= b*b
    43 0000003A A3[17000000]                    mov [z],eax ; z = b*b
    44 0000003F A1[0F000000]                    mov eax,DWORD[y] 
    45 00000044 8B15[13000000]                  mov edx,DWORD[y+4] ; edx:eax = 2*a-b
    46 0000004A 66F73D[17000000]                idiv WORD [z] ; eax = (2*a-b)/(b*b)
    47 00000051 A3[19000000]                    mov [w],eax ;w = (2*a-b)/(b*b)
    48 00000056 A0[02000000]                    mov al,[b] ; al =b
    49 0000005B 6698                            cbw
    50 0000005D 98                              cwde
    51 0000005E 99                              cdq ; edx:eax = b
    52 0000005F 2905[07000000]                  sub DWORD[x],eax
    53 00000065 1915[0B000000]                  sbb DWORD[x+4],edx ; x= x -b
    54 0000006B B808000000                      mov eax,8
    55 00000070 99                              cdq
    56 00000071 0105[07000000]                  add DWORD [x],eax
    57 00000077 1115[0B000000]                  adc DWORD [x+4],edx ; x=x-b+8
    58 0000007D A1[19000000]                    mov eax,[w] ; eax =(2*a-b)/(b*b)
    59 00000082 99                              cdq ; edx:eax=(2*a-b)/(b*b)
    60 00000083 0105[07000000]                  add DWORD[x],eax
    61 00000089 1115[0B000000]                  adc DWORD[x+4],edx ;x = x-b+8 + (2*a-b)/(b*b)
    62 0000008F A1[03000000]                    mov eax,[e]
    63 00000094 99                              cdq ;edx:eax = e
    64 00000095 0305[07000000]                  add eax,DWORD[x]
    65 0000009B 1315[0B000000]                  adc edx,DWORD[x+4] ; edx:eax = x-b+8 + (2*a-b)/(b*b) + e
    66                                          
    67                                          
    68                                          
    69                                          
    70                                          
    71                                          
    72                                          
    73                                          
    74                                          
    75                                          
    76                                          
    77                                          
    78                                          
    79                                          
    80                                          
    81                                          
    82                                          
    83                                          
    84                                          
    85                                          
    86                                       
    87                                          
    88                                   
    89                                          ; exit(0)
    90 000000A1 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    91 000000A3 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
