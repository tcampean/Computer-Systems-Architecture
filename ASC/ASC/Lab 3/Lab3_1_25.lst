     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 04                          a db 4
    15 00000001 0500                        b dw 5
    16 00000003 08000000                    c dd 8
    17 00000007 0A00000000000000            d dq 10
    18 0000000F 00000000                    x dd 0
    19 00000013 0000000000000000            y dq 0
    20                                      
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26 00000000 A0[00000000]                 mov al,[a] ; al = a
    27 00000005 B400                         mov ah,0
    28 00000007 66BA0000                     mov dx,0; dx:ax = a
    29 0000000B 6652                         push dx
    30 0000000D 6650                         push ax
    31 0000000F 58                           pop eax ; eax=a
    32 00000010 668B1D[01000000]             mov bx,[b] ;bx=b
    33 00000017 66B90000                     mov cx,0 ;cx:bx=b
    34 0000001B 6651                         push cx
    35 0000001D 6653                         push bx
    36 0000001F 5B                           pop ebx; ebx=b
    37 00000020 01D8                         add eax,ebx ; eax=a+b
    38 00000022 A3[0F000000]                 mov [x],eax ; x= a+b
    39 00000027 A1[03000000]                 mov eax, [c] ;eax=c
    40 0000002C 0105[0F000000]               add [x],eax ; x = a+b+c
    41 00000032 A1[07000000]                 mov eax,DWORD[d]
    42 00000037 8B15[0B000000]               mov edx,DWORD[d+4] ;edx:eax = d
    43 0000003D 0305[07000000]               add eax,DWORD[d]
    44 00000043 1315[0B000000]               adc edx,DWORD[d+4] ;edx:eax= d+d
    45 00000049 8B1D[0F000000]               mov ebx,[x]; ebx = a+b+c
    46 0000004F B900000000                   mov ecx,0 ; ecx:ebx = a+b+c
    47 00000054 29C3                         sub ebx,eax
    48 00000056 19D1                         sbb ecx,edx ; ebx = a+b+c-(d+d)
    49 00000058 891D[13000000]               mov DWORD [y],ebx 
    50 0000005E 890D[17000000]               mov DWORD [y+4],ecx ;y = ecx:ebx
    51 00000064 8B1D[03000000]               mov ebx,[c] ; ebx = c
    52 0000006A 66A1[01000000]               mov ax,[b] ; ax = b
    53 00000070 66BA0000                     mov dx,0 ; dx:ax = b
    54 00000074 6652                         push dx
    55 00000076 6650                         push ax
    56 00000078 58                           pop eax ;eax = b
    57 00000079 01D8                         add eax,ebx ; eax= b+c
    58 0000007B BA00000000                   mov edx,0 ; edx:eax=b+c
    59 00000080 0305[13000000]               add eax,DWORD[y]
    60 00000086 1315[17000000]               adc edx,DWORD[y+4] ; edx:eax = (a+b+c) -(d+d) + (b+c)
    61                                          
    62                                       
    63                                          
    64                                   
    65                                          ; exit(0)
    66 0000008C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    67 0000008E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
