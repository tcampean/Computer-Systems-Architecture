     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  ; our code starts here
     3                                  global _Prime
     4                                  segment code use32 public code
     5                                  
     6                                     
     7                                  _Prime:
     8 00000000 55                          push ebp
     9 00000001 89E5                        mov ebp, esp
    10 00000003 8B442408                    mov eax, [esp +8] ; we put the parameter in eax
    11                                      
    12 00000007 83F802                      cmp eax, 2 ; if the number is 0 or 1 then it's not prime
    13 0000000A 7224                        jb not_prime
    14 0000000C 742B                        je prime ; if the number is 2 then it's prime
    15 0000000E 89C1                        mov ecx, eax ; we save the number in ecx
    16 00000010 BB02000000                  mov ebx,2 ; we put in ebx the value 2
    17 00000015 99                          cdq
    18 00000016 F7F3                        div ebx ; we get in eax the initial number divided by 2 
    19 00000018 89C3                        mov ebx,eax
    20 0000001A 89C8                        mov eax,ecx
    21 0000001C 89D9                        mov ecx,ebx ; we exchange them : eax will be the initial number and ecx will be it's half
    22                                      
    23                                      Loop:
    24 0000001E 83F901                          cmp ecx,1 ; if we get to 1 then the number must be prime
    25 00000021 7416                            je prime
    26 00000023 89C3                            mov ebx,eax ; we save eax in ebx
    27 00000025 99                              cdq
    28 00000026 F7F1                            div ecx ; we divide edx:ecx by the current number
    29 00000028 85D2                            test edx, edx ; we check whether or not edx is 0
    30 0000002A 7404                            jz not_prime ; if it's zero then the number is not prime
    31 0000002C 89D8                            mov eax,ebx ; we put in eax the initial number
    32 0000002E E2EE                            loop Loop
    33                                      
    34                                      not_prime:
    35 00000030 B8FFFFFFFF                      mov eax, -1 ; if the number is not prime then we will change it's value to -1
    36 00000035 89EC                            mov esp,ebp
    37 00000037 5D                              pop ebp
    38 00000038 C3                              ret ; we return the value
    39                                      
    40                                      prime:
    41 00000039 89EC                            mov esp, ebp
    42 0000003B 5D                              pop ebp
    43 0000003C C3                              ret ; we return the value
