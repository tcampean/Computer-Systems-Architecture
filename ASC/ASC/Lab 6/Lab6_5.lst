     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      
    15 00000000 072137132E                  s1 db 7, 33, 55, 19, 46
    16                                      l_s1 equ $-s1
    17 00000005 2115070D1B1337012E          s2 db 33, 21, 7, 13, 27, 19, 55, 1, 46
    18                                      l_s2 equ $-s2
    19 0000000E 00<rept>                    d times l_s2 db 0
    20                                      
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25 00000000 BB00000000                      mov ebx, 0
    26 00000005 B900000000                      mov ecx,0
    27 0000000A BE[05000000]                    mov esi, s2
    28 0000000F BF[0E000000]                    mov edi, d
    29 00000014 BA00000000                      mov edx,0
    30 00000019 FC                              cld
    31                                     
    32                                          outer_Loop:
    33                                              
    34 0000001A 83F909                             cmp ecx, l_s2
    35 0000001D 742F                               je End
    36 0000001F BBFFFFFFFF                         mov ebx, -1
    37 00000024 AC                                 lodsb ; we put an element from the array in al
    38                                          inner_Loop:
    39 00000025 83FB05                              cmp ebx, l_s1
    40 00000028 740B                                je reset_inner
    41 0000002A 43                                  inc ebx
    42 0000002B 3883[00000000]                      cmp [s1+ebx],al ; we compare the element we stored with each element from the first array
    43 00000031 740D                                je Adding ; if we find it then we are going to add it
    44 00000033 EBF0                                jmp inner_Loop
    45                                          
    46                                          reset_inner:
    47 00000035 41                                  inc ecx 
    48 00000036 C682[0E000000]00                    mov [d+edx],BYTE 0 ; if we didn't find it then we are going to put a zero in it's place instead
    49 0000003D 42                                  inc edx
    50                                          
    51 0000003E EBDA                                 jmp outer_Loop
    52                                          Adding:
    53 00000040 FEC3                                inc bl
    54 00000042 889A[0E000000]                      mov [d+edx], bl ; we put the index of the element in it's position
    55 00000048 FECB                                dec bl
    56 0000004A 42                                  inc edx
    57 0000004B 41                                  inc ecx
    58 0000004C EBCC                                jmp outer_Loop ; we go to the next element
    59                                              
    60                                          End:
    61                                      
    62                                          ; exit(0)
    63 0000004E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    64 00000050 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
